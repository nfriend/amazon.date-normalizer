import { normalize } from '../src/index';

// Suppress warnings generated by Moment when it
// tries to parse an invalid string value
console.warn = jest.fn();

describe('normalize', () => {
  test.each`
    input            | expected
    ${'2015-11-30'}  | ${'2015-11-30T00:00:00.000Z'}
    ${'2015-W49'}    | ${'2015-11-30T00:00:00.000Z'}
    ${'2015-W49-WE'} | ${'2015-12-05T00:00:00.000Z'}
    ${'2015-11'}     | ${'2015-11-01T00:00:00.000Z'}
    ${'2015-11-XX'}  | ${'2015-11-01T00:00:00.000Z'}
    ${'2015'}        | ${'2015-01-01T00:00:00.000Z'}
    ${'2015-XX-XX'}  | ${'2015-01-01T00:00:00.000Z'}
    ${'201X'}        | ${'2010-01-01T00:00:00.000Z'}
    ${'2015-WI'}     | ${'2015-12-21T00:00:00.000Z'}
    ${'2015-SP'}     | ${'2015-03-21T00:00:00.000Z'}
    ${'2015-SU'}     | ${'2015-06-21T00:00:00.000Z'}
    ${'2015-FA'}     | ${'2015-09-21T00:00:00.000Z'}
  `('returns $expected when $input is provided', ({ input, expected }) => {
    expect(normalize(input).toISOString()).toBe(expected);
  });

  test.each`
    input
    ${null}
    ${undefined}
    ${''}
    ${'not a valid date'}
    ${false}
    ${true}
    ${{ an: 'object' }}
    ${new Date()}
    ${() => {
  /* noop */
}}
    ${/hello/}
    ${new Map()}
  `('returns an invalid Moment object when $input is provided', ({ input }) => {
    expect(normalize(input).isValid()).toBe(false);
  });
});
